name: Test run-on-arch

on:
  push:
    branches:
      - '*'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  build_job:
    # The host should always be linux
    runs-on: ubuntu-22.04
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}

    # Run steps on a matrix of 3 arch/distro combinations
    strategy:
      matrix:
#        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11-rc"]
        python-version: ["3.10"]
        slim: ["-slim", ""]
#        arch: [ "armv6", "armv7", "aarch64", "ppc64le" ]
        arch: [ "armv7" ]
    steps:
      - uses: actions/checkout@v2.1.0
      - uses: uraimo/run-on-arch-action@v2
        name: Build artifact
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: bullseye

          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts"

          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"

          # The shell to run commands with in the container
          shell: /bin/bash

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            case "${{ matrix.distro }}" in
              ubuntu*|jessie|stretch|buster|bullseye)
                apt-get update -yq
                apt-get install -yq curl bash build-essential libffi-dev libssl-dev zlib1g-dev software-properties-common
                add-apt-repository ppa:deadsnakes/ppa
                apt-get update
                apt-get install -y python${{matrix.python-version }} python${{matrix.python-version }}-venv python${{matrix.python-version }}-pip python${{matrix.python-version }}-apt
                update-alternatives --install /usr/bin/python3 python3 /usr/bin/python${{matrix.python-version }} 1
                curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s --default-host armv7-unknown-linux-gnueabi --default-toolchain armv7-unknown-linux-gnueabi -t armv7-unknown-linux-gnueabi
                source $HOME/.cargo/env
                whereis rustc
                echo "Done building container"
                ;;
            esac

          # Produce a binary artifact and place it in the mounted volume
          run: |
            source $HOME/.cargo/env
            rustc --version
            cargo --version
            python3 -m pip download cryptography --wheel-dir /artifacts
            ls -al /artifacts
      - name: Show the artifact
        # Items placed in /artifacts in the container will be in
        # ${PWD}/artifacts on the host.
        run: |
          ls -al "${PWD}/artifacts"
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.workflow }}-${{ matrix.python-version }}${{ matrix.slim }}-cryptography
          path: ${PWD}/artifacts